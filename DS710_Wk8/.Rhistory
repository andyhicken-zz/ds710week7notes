vSumFirstNElements <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
return ( c(sum(aVector[1:n]), aVector[n+1:(length(aVector)-n)]) )
}
thresholdCombine(testVector1, 3)
vSumFirstNElements <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the one-line version.
return ( c(sum(aVector[1:n]), aVector[n+1:(length(aVector)-n)]) )
}
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return () c(sumN, aVector[n+1:(length(aVector)-n)])
vSumFirstNElements <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the one-line version.
return ( c(sum(aVector[1:n]), aVector[n+1:(length(aVector)-n)]) )
}
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
vSumFirstNElements(testVector1, 3)
vSumFirstNElementsLoop(testVector1, 3)
findIndexLessThanThreshold <- function(aVector, threshold = 5){
}
findIndexLessThanThreshold <- function(aVector, threshold = 5){
n = 0 # this is the index
for (ii in 1:length(aVector)){
if (aVector < threshold) {
n = ii
}
return(n)
}
}
findIndexLessThanThreshold(testVector1)
findIndexLessThanThreshold <- function(aVector, threshold = 5){
n = 0 # this is the index
for (ii in 1:length(aVector)){
if (aVector[ii] < threshold) {
n <-  ii
}
return(n)
}
}
findIndexLessThanThreshold(testVector1)
findIndexLessThanThreshold(testVector1, 1000)
findIndexLessThanThreshold <- function(aVector, threshold = 5){
n = 0 # this is the index
for (ii in 1:length(aVector)){
print(ii)
print(aVector[ii])
print(threshold)
if (aVector[ii] < threshold) {
n <-  ii
}
print(n)
return(n)
}
}
findIndexLessThanThreshold(testVector1, 1000)
findIndexLessThanThreshold <- function(aVector, threshold = 5){
n = 0 # this is the index
for (ii in 1:length(aVector)){
# print(ii)
# print(aVector[ii])
# print(threshold)
if (aVector[ii] < threshold) {
n <-  ii
}
# print(n)
}
return(n)
}
findIndexLessThanThreshold(testVector1, 1000)
findIndexLessThanThreshold(testVector1, 100)
findIndexLessThanThreshold <- function(aVector, threshold = 5){
n = 0 # this is the index
for (ii in 1:length(aVector)){
if (aVector[ii] < threshold) {
n <-  ii
}
}
return(n)
}
findIndexLessThanThreshold(testVector1, 100)
# a vector where all of the numbers are greater than or equal to 5,
testVector2 <- c(5, 6, 7, 8, 9)
# a vector where the first number is less than 5 and the others are greater than or equal to 5
testVector3 <- c(1, 5, 6, 12, 47)
# a vector with more than one number that is less than 5 and other numbers that are greater than or equal to 5.
testVector4 <- c(2, 3, 4, 5, 6, 7, 8)
# a vector where all of the numbers are less than 5, and their sum is greater than or equal to 5, and
testVector5 <- c(1, 2, 3, 4)
# a vector where all of the numbers are less than 5, and their sum is less than 5.
testVector6 <- c(0, 1, 2)
findIndexLessThanThreshold(testVector2)
findIndexLessThanThreshold(testVector3)
findIndexLessThanThreshold(testVector4)
findIndexLessThanThreshold(testVector5)
findIndexLessThanThreshold(testVector6)
findIndexLessThanThreshold(testVector2, 9)
findIndexLessThanThreshold(testVector3, 15)
findIndexLessThanThreshold(testVector4, 5.5)
findIndexLessThanThreshold(testVector5, -1)
findIndexLessThanThreshold(testVector6, 100000)
findIndexLessThanThreshold(testVector2)
findIndexLessThanThreshold(testVector3)
findIndexLessThanThreshold(testVector4)
findIndexLessThanThreshold(testVector5)
findIndexLessThanThreshold(testVector6)
findIndexLessThanThreshold(testVector2, 9)
findIndexLessThanThreshold(testVector3, 15)
findIndexLessThanThreshold(testVector4, 5.5)
findIndexLessThanThreshold(testVector5, -1)
findIndexLessThanThreshold(testVector6, 100000)
functionE <- function(x, y){
n <- findIndexLessThanThreshold(y)
return(vSumFirstNElements(x, n))
}
# I think the following should sum the first 4 elements of testVector1
functionE(testVector1, testVector5)
# I think the following should sum the first 4 elements of testVector1
functionE(testVector1, testVector5)
# The following will do whatever happens when we sum the first 0 elements of testVector1
functionE(testVector1, testVector2)
vSumFirstNElements <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the one-line version.
if (n < 1){
return(aVector)
} else {
return ( c(sum(aVector[1:n]), aVector[n+1:(length(aVector)-n)]) )
}
}
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
vSumFirstNElements(testVector1, 3)
vSumFirstNElementsLoop(testVector1, 3)
# I think the following should sum the first 4 elements of testVector1
functionE(testVector1, testVector5)
# The following will do whatever happens when we sum the first 0 elements of testVector1
functionE(testVector1, testVector2)
functionE <- function(x, y, threshold = 5){
n <- findIndexLessThanThreshold(y)
return(vSumFirstNElements(x, n))
}
# I think the following should sum the first 4 elements of testVector1
functionE(testVector1, testVector5)
# The following will do whatever happens when we sum the first 0 elements of testVector1
functionE(testVector1, testVector2)
# After the above test, I went back and add an if statement to
# vSumFirstNElements to return the vector if n was less than 1.
functionE <- function(x, y, threshold = 5){
n <- findIndexLessThanThreshold(y, threshold)
return(vSumFirstNElements(x, n))
}
# I think the following should sum the first 4 elements of testVector1
functionE(testVector1, testVector5)
# The following will do whatever happens when we sum the first 0 elements of testVector1
functionE(testVector1, testVector2)
# After the above test, I went back and add an if statement to
# vSumFirstNElements to return the vector if n was less than 1.
#
# I think the following should sum the first 4 elements of testVector1
functionE(testVector1, testVector5)
# The following will do whatever happens when we sum the first 0 elements of testVector1
functionE(testVector1, testVector2)
# After the above test, I went back and add an if statement to
# vSumFirstNElements to return the vector if n was less than 1.
# Test the threshold.
functionE(testVector1, testVector3, 1000)
View(functionE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
library(ggformula)
cars <- read_csv("Cars 2005.csv")
head(cars)
cars <- cars %>% mutate(Cruise = as.factor(Cruise), Sound = as.factor(Sound), Leather = as.factor(Leather))
cars
cars %>% gf_point(Price ~ Liter) %>% gf_smooth(Price ~ Liter)
cars %>%
gf_point(Price ~ Liter, col =~ Leather, size = 5, alpha = 0.6) %>%
gf_labs(title = "Car Price vs. Engine Liters",
x = "Engine Liters",
y = "Price (USD)",
caption = "Source: cars.csv, of course")
cars %>%
gf_histogram(~ Price) %>%
gf_facet_grid(Leather ~ .) %>%
gf_labs(title = "Car Prices",
x = "Price (USD)",
y = "Number of cars",
caption = "Source: cars.csv, of course")
cars %>%
gf_histogram(~ Price) %>%
gf_facet_grid(. ~ Leather) %>%
gf_labs(title = "Car Prices",
x = "Price (USD)",
y = "Number of cars",
caption = "Source: cars.csv, of course")
cars %>%
gf_bar(~ Type, fill =~ Leather, position = position_dodge())%>%
gf_labs(title = "Cars with and without leather seats by type",
x = "Type",
y = "Number of cars",
caption = "Source: cars.csv, of course")
# This nested ifelse() says if a car has less than 2 liters, it's Compact.
# If it has 2 or more liters, Cruise, and at least one of Sound and Leather, it's Luxury.
# Otherwise, it's Standard.
cars <-
cars %>%
mutate(Tier = ifelse( Liter < 2, "Compact",
ifelse( (Cruise == 1) & ((Sound == 1) | (Leather == 1)), "Luxury",
"Standard")
)
)
cars
price_by_tier <- cars %>%
group_by(Tier) %>%
summarise(median_price = median(Price)) %>%
arrange(median_price)
price_by_tier
price_by_tier %>%
mutate(Tier = reorder(Tier, median_price)) %>%
gf_col( median_price ~ Tier )
cars_summary <- cars %>%
select(Price, Mileage, Tier) %>%
left_join(price_by_tier)
# added this to find the cars that are most underpriced vs. the median price for their Tier.
cars_summary <- cars_summary %>%
mutate(best_deal = median_price - Price) %>%
arrange(desc(best_deal))
head(cars_summary)
cars <- cars %>% mutate(c(Cruise, Sound, Leather) = as.factor(c(Cruis, Sound, Leather)))
cars <- cars %>% mutate(Cruise, Sound, Leather = as.factor(Cruise, Sound, Leather))
library(ggformula)
cars <- cars %>% mutate(Cruise, Sound, Leather = as.factor(Cruise, Sound, Leather))
library(dplyr)
cars <- cars %>% mutate(Cruise, Sound, Leather = as.factor(Cruise, Sound, Leather))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
library(ggformula)
cars <- read_csv("Cars 2005.csv")
head(cars)
cars <- cars %>% mutate(Cruise = as.factor(Cruise), Sound = as.factor(Sound), Leather = as.factor(Leather))
cars
cars %>% gf_point(Price ~ Liter) %>% gf_smooth(Price ~ Liter)
cars %>%
gf_point(Price ~ Liter, col =~ Leather, size = 5, alpha = 0.6) %>%
gf_labs(title = "Car Price vs. Engine Liters",
x = "Engine Liters",
y = "Price (USD)",
caption = "Source: cars.csv, of course")
cars %>%
gf_histogram(~ Price) %>%
gf_facet_grid(Leather ~ .) %>%
gf_labs(title = "Car Prices",
x = "Price (USD)",
y = "Number of cars",
caption = "Source: cars.csv, of course")
cars %>%
gf_histogram(~ Price) %>%
gf_facet_grid(. ~ Leather) %>%
gf_labs(title = "Car Prices",
x = "Price (USD)",
y = "Number of cars",
caption = "Source: cars.csv, of course")
cars %>%
gf_bar(~ Type, fill =~ Leather, position = position_dodge())%>%
gf_labs(title = "Cars with and without leather seats by type",
x = "Type",
y = "Number of cars",
caption = "Source: cars.csv, of course")
# This nested ifelse() says if a car has less than 2 liters, it's Compact.
# If it has 2 or more liters, Cruise, and at least one of Sound and Leather, it's Luxury.
# Otherwise, it's Standard.
cars <-
cars %>%
mutate(Tier = ifelse( Liter < 2, "Compact",
ifelse( (Cruise == 1) & ((Sound == 1) | (Leather == 1)), "Luxury",
"Standard")
)
)
cars
price_by_tier <- cars %>%
group_by(Tier) %>%
summarise(median_price = median(Price)) %>%
arrange(median_price)
price_by_tier
price_by_tier %>%
mutate(Tier = reorder(Tier, median_price)) %>%
gf_col( median_price ~ Tier )
cars_summary <- cars %>%
select(Price, Mileage, Tier) %>%
left_join(price_by_tier)
# added this to find the cars that are most underpriced vs. the median price for their Tier.
cars_summary <- cars_summary %>%
mutate(best_deal = median_price - Price) %>%
arrange(desc(best_deal))
head(cars_summary)
knit_with_parameters('~/GitHub/ds710fall2018assignment6/Assignment_6_R.Rmd')
knit_with_parameters('~/GitHub/ds710fall2018assignment6/Assignment_6_R.Rmd')
# getting a sample of 3 random numbers in a range:
sample(1:10, 3)
# Let's say we survey 100 people and find 61 who
# support raising the minimum wage:
prop.test(61, 100, p = .5, alternative = greater)
# Let's say we survey 100 people and find 61 who
# support raising the minimum wage:
prop.test(61, 100, p = .5, alternative = "greater")
prop.test(50, 100, p = .5, alternative = "greater")
prop.test(50, 100, p = .4, alternative = "greater")
prop.test(50, 100, p = .39, alternative = "greater")
prop.test(50, 100, p = .61, alternative = "greater")
prop.test(61, 100, p = .5, alternative = "greater")
prop.test(39, 100, p = .5, alternative = "greater")
prop.test(39, 1, p = .5, alternative = "greater")
prop.test(1, 100, p = .5, alternative = "greater")
prop.test(99, 100, p = .5, alternative = "greater")
prop.test(90, 100, p = .5, alternative = "greater")
prop.test(70, 100, p = .5, alternative = "greater")
prop.test(60, 100, p = .5, alternative = "greater")
prop.test(55, 100, p = .5, alternative = "greater")
prop.test(54, 100, p = .5, alternative = "greater")
prop.test(53, 100, p = .5, alternative = "greater")
prop.test(52, 100, p = .5, alternative = "greater")
prop.test(51, 100, p = .5, alternative = "greater")
prop.test(50, 100, p = .5, alternative = "greater")
prop.test(49, 100, p = .5, alternative = "greater")
library(readr)
setwd("~/GitHub/ds710notes/DS710_Wk8")
read_csv("Cars 2005.csv")
cars <- read_csv("Cars 2005.csv")
# look at the data.
length(cars$Price)
library(ggformula)
# Part 4: Conclusion
# We reject the null hypothesis if p <= .05 or .01 . Easy!
cars %>%
gf_histogram(~ Price)
# Do the t-test
t.test(cars$Price, mu = 24721.86, alternative = "less")
# Here's an example of a two-sample t-test:
# Is there a difference in mean price between cars with two doors and cars with 4 doors?
# Null hypothesis: there's no difference; they're equal.
# H-sub-1: there's a different. Not equal.
# t-test:
t.test(cars.Price ~ cars.Doors, alternative = "two.sided")
# Here's an example of a two-sample t-test:
# Is there a difference in mean price between cars with two doors and cars with 4 doors?
# Null hypothesis: there's no difference; they're equal.
# H-sub-1: there's a different. Not equal.
# t-test:
t.test(cars$Price ~ cars$Doors, alternative = "two.sided")
# This does the same thing, because two.sided is the default value for alternative:
t.test(cars$Price ~ cars$Doors)
# Here's an alternative way to do this, if the groups are in different vectors
TwoDoor = Price [ which(Doors == 2)]
# Here's an alternative way to do this, if the groups are in different vectors
TwoDoor = cars$Price [ which(Doors == 2)]
# Here's an alternative way to do this, if the groups are in different vectors
with cars
# Here's an alternative way to do this, if the groups are in different vectors
with cars:
TwoDoor = cars$Price [ which(Doors == 2)]
# Here's an alternative way to do this, if the groups are in different vectors
TwoDoor = cars$Price [ which(cars$Doors == 2)]
FourDoor = cars$Price [ which(cars$Doors ==4)]
t.test(TwoDoor, FourDoor)
# Example: Did unemployment rates in the US decrease from 2013-2014?
# We happen to have a sample of county unemployment rates right here:
read_csv("Unemployment_rates.csv")
# Example: Did unemployment rates in the US decrease from 2013-2014?
# We happen to have a sample of county unemployment rates right here:
unemp <- read_csv("Unemployment_rates.csv")
# Then here's the paired samples t.test:
t.test(unemp$Rate_2013, unemp$Rate_2014, paired = T, alternative = "greater")
summary(unemp)
# Then here's the paired samples t.test:
t.test(unemp$Rate_2013, unemp$Rate_2014, paired = T, alternative = "greater")
# Checking appropriateness...
length(cars$Cruise)
804 * .5
# First have to know how many cars had cruise control, and how many total cars there are
# in the sample:
numCruise = length(which( Cruise == 1))
# First have to know how many cars had cruise control, and how many total cars there are
# in the sample:
numCruise = length(which( cars$Cruise == 1))
numCruise
totalCars = length(cars$Cruise)
totalCars
# now do the prop.test
prop.test(numCruise, n = totalCars, p = .5, alternative = "greater")
# An alternatve approach using a matrix:
numWithout = length(which (cars$Cruise == 0))
numWithout
CruiseMatrix = matrix (c(605, 199), nr = 1)
prop.test(CruiseMatrix, p = .5, alternative = "greater")
length( which ( cars$Doors == 2 & cars$Cruise == 1))
length( which ( cars$Doors == 2 ))
length( which ( cars$Doors == 4 & cars$Cruise == 1))
length( which ( cars$Doors == 4 ))
# returns 150, 190, 455, 614
prop.test( c(150, 455), n = c(190, 614), alternative = "two.sided")
# First find the n in data that falls into each category
typecount = summary (cars$Type)
typecount
summary(cars$Type)
?summary
cars$Type
summary(cars)
library(dply)
library(dplyr)
summarise(cars$Type)
cars_temp <- cars %>%
mutate(Type = as.factor(Type))
summary(cars_temp$Type)
cars <- cars %>%
mutate(Type = as.factor(Type))
summary(cars$Type)
summary(cars)
# First find the n in data that falls into each category
typecount = summary (cars$Type)
typecount
prop2014 = c(.024, .073, .118, .761, .026)
prop2014
prop2014 * 804
# good to go; let's run it
chisq.test(typecount, p = prop2014)
prop2014 = c(.022, .073, .118, .761, .026)
# good to go; let's run it
chisq.test(typecount, p = prop2014)
# are cars engines _equally likely_ to have 4, 6, or 8 cylinders?
counts = table(cars$Cylinder)
counts
# when we hypothesis that they're all equally likely, chisq is really easy to use:
chisq.test(counts)
# first do a scatterplot. Any reason not to think linear might work?
plot(cars$Mileage, cars$Price)
# and here we go.
model = lm (cars$Price ~ cars$Mileage)
model
# plot it on the scatterplot like this:
abline ( model, color = "red", lwd = 2)
# plot it on the scatterplot like this:
abline ( model, col = "red", lwd = 2)
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, list(Mileage = 20000))
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, list(cars$Mileage = 20000))
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, 20000)
model
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, cars$Mileage = 20000)
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, cars$Mileage == 20000)
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, cars$Mileage)
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, list(20000))
model
# then we can use this fancy model to make predictions,
# such as the price of a one-year old used car with 20,000 miles on it:
predict(model, list(cars$Mileage = 20000))
# residuals = difference between true y-val and predicted.
# we can use residuals to evaluate appropriateness of linear regression.
# using ``residual diagnostic plots.''
par ( mfrow = c(2,2))
plot (model)

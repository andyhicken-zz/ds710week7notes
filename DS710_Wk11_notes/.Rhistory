Eng_new_freqs
length(Eng_new_freqs)
# Because I don't want to change the data type of the Letter column from character to string, I am going
# to use the character '#' in place of those four letters (rather than listing them in a string).
Eng_new_ltrs <- c("#", Eng_least_common$Letter[5:26])
encryptA_new_ltrs <- c("#", encryptA_least_common_first4$Key[5:26])
encryptA_new_ltrs <- c("#", encryptA_least_common$Key[5:26])
length(encryptA_new_freqs)
Eng_new_ltrs
encryptA_new_ltrs
Eng_compressed <- data.frame(Eng_new_ltrs, Eng_new_freqs)
encryptA_new_ltrs <- c("#", encryptA_least_common_first4$Key[5:26])
Eng_compressed
?names
names(Eng_compressed)
scratch <- Eng_compressed
names(scratch)
names(scratch) <- c("Letter", "Frequency")
Eng_compressed
scratch
# first finding whether we have >= 5 expected results in each category
# how many total letters are in encryptA?
total_letters <- sum(encryptA_least_common$Frequency)
expected_results <- total_letters * Eng_least_common$English
expected_results
# The four least common letters are <= 5, so need to combine the first four rows of each dataframe.
# This will be painful and could doubtless be done much more elegantly by someone who really knows R.
# Starting with the numeric columns:
Eng_least_common_first4 <- sum(Eng_least_common[1:4, 2])
Eng_new_freqs <- c(Eng_least_common_first4, Eng_least_common$English[5:26])
encryptA_least_common_first4 <- sum(encryptA_least_common[1:4,2])
encryptA_new_freqs <- c(encryptA_least_common_first4, encryptA_least_common$Frequency[5:26])
# Because I don't want to change the data type of the Letter column from character to string, I am going
# to use the character '#' in place of those four letters (rather than listing them in a string).
Eng_new_ltrs <- c("#", Eng_least_common$Letter[5:26])
encryptA_new_ltrs <- c("#", encryptA_least_common$Key[5:26])
# Make the data frames
Eng_compressed <- data.frame(Eng_new_ltrs, Eng_new_freqs)
encryptA_compressed <- data.frame(encryptA_new_ltrs, encryptA_new_freqs)
# Fix the column names
names(Eng_compressed) <- c("Letter", "Frequency")
names(encryptA_compressed) <- c("Letter", "Frequency")
# test <- chisq.test()
View(Eng_compressed)
View(encryptA_compressed)
View(Eng_least_common)
View(encryptA_least_common)
# OK, to be sure, check the expected values again:
total_letters <- sum(encryptA_compressed$Frequency)
expected_results <- total_letters * Eng_compressed$Letter
expected_results
total_letters
expected_results <- total_letters * Eng_compressed$Frequency
expected_results
source('~/GitHub/ds710notes/DS710_Wk8/DS710_Week8_notes.R', echo=TRUE)
test <- chisq.test(encryptA_compressed$Frequency, p = Eng_compressed$Frequency)
test
View(test$expected)
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed2 <- vSumFirstNElementsLoop(encryptA_least_common$Frequency)
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed2 <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed2
EngA_compressed2 <- vSumFirstNElementsLoop(EngA_compressed2$English, 4)
Eng_compressed2 <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed2
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# pretty slick.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
chisq.test(encryptA_compressed2, p = Eng_compressed2)
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# pretty slick.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
test <- chisq.test(encryptA_compressed2, p = Eng_compressed2)
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# pretty slick.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
test <- chisq.test(encryptA_compressed2, p = Eng_compressed2)
test
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# so much less painful this way.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
test <- chisq.test(encryptA_compressed2, p = Eng_compressed2)
test
test$expected
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# so much less painful this way.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
test <- chisq.test(encryptA_compressed2, p = Eng_compressed2)
test
test$expected
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# so much less painful this way.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
test <- chisq.test(encryptA_compressed2, p = Eng_compressed2)
test
test$expected
test <- chisq.test(encryptA_compressed_vector, p = Eng_compressed_vector)
test
test$expected
# Incidentally, I see now that the work I did to reconstruct a compressed version of the dataframes
# was unnecessary. We care here about comparing proportions; we don't care about the values those
# proportions are associated with.
Eng_least_common <- lfs %>% arrange(English) %>% select(Letter, English)
head(Eng_least_common)
Welsh_least_common <- lfs %>% arrange(Welsh) %>% select(Letter, Welsh)
head(Welsh_least_common)
test2 <- chisq.test(encryptA_least_common, p = Welsh_least_common$Welsh )
test2 <- chisq.test(encryptA_least_common$Frequency , p = Welsh_least_common$Welsh )
test2
test2$expected
chisq.compressed <- function(ValsVector, ProportionsVector, nToCompress) {
ValsVector <- vSumFirstNElementsLoop(ValsVector, nToCompress)
ProportionsVector <- vSumFirstNElementsLoop(ProportionsVector, nToCompress)
ReturnTest <- chisq.test(ValsVector, p = ProportionsVector)
return(ReturnTest)
}
test2 <- chisq.test(encryptA_least_common$Frequency , p = Welsh_least_common$Welsh )
test2
test2$expected
test3 <- chisq.compressed(encryptA_least_common$Frequency , p = Welsh_least_common$Welsh , 6)
test3 <- chisq.compressed(encryptA_least_common$Frequency , Welsh_least_common$Welsh , 6)
test3
test3$expected
test3 <- chisq.compressed(encryptA_least_common$Frequency , Welsh_least_common$Welsh , 7)
test3
test3$expected
test3
View(Welsh_least_common)
# I didn't know that handy trick with test$expected. I'll start there.
test2 <- chisq.test(encryptA_least_common$Frequency , p = Welsh_least_common$Welsh )
test2
test2$expected
# OK, we need to compress the first 7 categories. Here is a function for that.
chisq.compressed <- function(ValsVector, ProportionsVector, nToCompress) {
ValsVector <- vSumFirstNElementsLoop(ValsVector, nToCompress)
ProportionsVector <- vSumFirstNElementsLoop(ProportionsVector, nToCompress)
View(ValsVector)
View(ProportionsVector)
ReturnTest <- chisq.test(ValsVector, p = ProportionsVector)
return(ReturnTest)
}
test3 <- chisq.compressed(encryptA_least_common$Frequency , Welsh_least_common$Welsh , 7)
test3
# get the data and set up variables for Encrypted B
encryptB <- read_csv("encryptB.csv")
encryptB %>%
mutate(Key = reorder(Key, Frequency)) %>%
gf_col(Frequency ~ Key) %>%
gf_labs(title = "Letter frequencies in Encrypted B")
encryptB_least_common <- encryptB %>% arrange(Frequency)
head(encryptB_least_common)
length(encryptB_least_common$Key) # verifies 26 letters
test4 <- chisq.test(encryptB_least_common$Frequency , p = Eng_least_common$English )
test4
test4$expected
test5 <- chisq.compressed(encryptB_least_common$Frequency , p = Eng_least_common$English , 4)
test5 <- chisq.compressed(encryptB_least_common$Frequency , Eng_least_common$English , 4)
test5
test6 <- chisq.test(encryptB_least_common$Frequency , p = Welsh_least_common$Welsh )
test6
test6$expected
test7 <- chisq.compressed(encryptB_least_common$Frequency , Welsh_least_common$Welsh , 6)
test7
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggformula)
getStandardError <- function(sd1, sd2, n1, n2){
# given standard deviation and n of two samples, returns the standard error
se <- sqrt( (sd1 ^ 2 / n1) + (sd2 ^ 2 / n2) )
return(se)
}
dfWithoutData <- function(sd1, sd2, n1, n2) {
# returns degrees of freedom for a t-test with two samples that we don't have
# the data for.
numerator <- ( sd1 ^2 / n1 + sd2 ^2 / n2 ) ^2
denominator <- (( sd1 ^2 / n1 ) ^2 / (n1 - 1)) + ((sd2 ^2 / n2 ) ^2 / (n2- 1))
df <- numerator / denominator
return(df)
}
tWithoutData <- function(mean1, mean2, sd1, sd2, n1, n2) {
# two-sample t-test function for use when you don't have the data
# requires the mean, standard deviation, and n of two samples
t <- (mean1 - mean2) / getStandardError(sd1, sd2, n1, n2)
df <- dfWithoutData(sd1, sd2, n1, n2)
p <-  2 * pt(-abs(t), df)
return_vector <- c(t, df, p)
# going to print to mimic the R t.test function
print("T-test without data")
print( paste("t = ", t, ", df = ", df, ", p-value = ", p))
return(return_vector)
}
# here is the data from assignment 7:
mournerWordLengths <- c(3, 7, 8, 3, 7, 3, 3, 6, 2, 3, 3, 2, 3, 4, 3, 8, 10, 2, 3, 3, 7, 4, 2, 10, 6, 3, 4, 9, 3, 6, 4, 2, 4, 2, 6, 4, 3, 7, 5, 2, 5, 4, 8, 7, 4, 2, 6, 4, 4, 3, 3, 7, 2, 7, 3, 4, 2, 11, 2, 6, 5, 4, 8, 2, 3, 7, 2, 4, 6, 4, 3, 5, 6, 2, 3, 5, 5, 5, 5, 6, 5, 4, 8, 8, 7, 2, 3, 8, 7, 2, 3, 6, 3, 6, 2, 3, 9, 3, 6, 4, 3, 3, 7, 3, 5, 2, 9, 3, 8, 8, 2, 6, 4, 3, 4, 5, 2, 3, 3, 4, 2, 7, 5, 6, 8, 4, 3, 7, 6, 6, 5, 2, 3, 6, 12, 6, 6, 2, 5, 5, 5, 6, 2, 5, 2, 3, 1, 7, 6, 3, 5, 4, 4, 1, 6, 3, 1, 7)
meanMourner <- mean(mournerWordLengths)
sdMourner <- sd(mournerWordLengths)
nMourner <- length(mournerWordLengths)
# John Hancock wrote a 121-word article with a mean word length of 4.69
# and standard deviation of 2.60.
tHancock <- tWithoutData(4.69, meanMourner, 2.60, sdMourner, 121, nMourner)
tHancock # this is a vector with, in order, t, df, p
# John Hancock wrote a 121-word article with a mean word length of 4.69
# and standard deviation of 2.60.
test_sample1 <- rnorm(121, mean = 4.69, sd = 2.60)
test_sample2 <- rnorm(180, mean = 4.6, sd = 2.70)
t.test(test_sample1, test_sample2, alternative = "two.sided")
tWithoutData( mean(test_sample1), mean(test_sample2), sd(test_sample1), sd(test_sample2),
length(test_sample1), length(test_sample2))
# they match!
tHancock <- tWithoutData(4.69, meanMourner, 2.60, sdMourner, 121, nMourner)
tHancock # this is a vector with, in order, t, df, p
lfs <-read_csv("Letter Frequencies.csv")
lfs
lfs %>%
mutate(Letter = reorder(Letter, English)) %>%
gf_col(English ~ Letter) %>%
gf_labs(title = "Letter frequencies in English")
lfs %>%
mutate(Letter = reorder(Letter, Welsh)) %>%
gf_col(Welsh ~ Letter) %>%
gf_labs(title = "Letter frequencies in Welsh")
encryptA <- read_csv("encryptA.csv")
encryptA %>%
mutate(Key = reorder(Key, Frequency)) %>%
gf_col(Frequency ~ Key) %>%
gf_labs(title = "Letter frequencies in Encrypted A")
Eng_least_common <- lfs %>% arrange(English) %>% select(Letter, English)
head(Eng_least_common)
Welsh_least_common <- lfs %>% arrange(Welsh) %>% select(Letter, Welsh)
head(Welsh_least_common)
encryptA_least_common <- encryptA %>% arrange(Frequency)
head(encryptA_least_common)
length(encryptA_least_common$Key) # verifies 26 letters
# first finding whether we have >= 5 expected results in each category
# how many total letters are in encryptA?
total_letters <- sum(encryptA_least_common$Frequency)
expected_results <- total_letters * Eng_least_common$English
expected_results
# The four least common letters are <= 5, so need to combine the first four rows of each dataframe.
# This will be painful and could doubtless be done much more elegantly by someone who really knows R.
# Starting with the numeric columns:
Eng_least_common_first4 <- sum(Eng_least_common[1:4, 2])
Eng_new_freqs <- c(Eng_least_common_first4, Eng_least_common$English[5:26])
encryptA_least_common_first4 <- sum(encryptA_least_common[1:4,2])
encryptA_new_freqs <- c(encryptA_least_common_first4, encryptA_least_common$Frequency[5:26])
# Because I don't want to change the data type of the Letter column from character to string, I am going
# to use the character '#' in place of those four letters (rather than listing them in a string).
Eng_new_ltrs <- c("#", Eng_least_common$Letter[5:26])
encryptA_new_ltrs <- c("#", encryptA_least_common$Key[5:26])
# Make the data frames
Eng_compressed <- data.frame(Eng_new_ltrs, Eng_new_freqs)
encryptA_compressed <- data.frame(encryptA_new_ltrs, encryptA_new_freqs)
# Fix the column names
names(Eng_compressed) <- c("Letter", "Frequency")
names(encryptA_compressed) <- c("Letter", "Frequency")
# OK, to be sure, check the expected values again:
total_letters <- sum(encryptA_compressed$Frequency)
expected_results <- total_letters * Eng_compressed$Frequency
expected_results
# everything is >= 5! We proceed to test.
test <- chisq.test(encryptA_compressed$Frequency, p = Eng_compressed$Frequency)
test
test$expected
# I already did this above, though not with my slick function from Homework 3. Darn it!
vSumFirstNElementsLoop <- function(aVector, n) {
# Return a vector where the first element is the sum of the first `n`
# elements of the input vector, and the rest of the vector is a copy of
# the other elements of the input vector.
# This is the loop-based version.
sumN = 0
for(ii in 1:n){
sumN = sumN + aVector[ii]
}
return ( c(sumN, aVector[n+1:(length(aVector)-n)]) )
}
encryptA_compressed_vector <- vSumFirstNElementsLoop(encryptA_least_common$Frequency, 4)
encryptA_compressed_vector
# so much less painful this way.
Eng_compressed_vector <- vSumFirstNElementsLoop(Eng_least_common$English, 4)
Eng_compressed_vector
test <- chisq.test(encryptA_compressed_vector, p = Eng_compressed_vector)
test
test$expected
# Incidentally, I see now that the work I did to reconstruct a compressed version of the dataframes
# was unnecessary. We care here about comparing proportions; we don't care about the values those
# proportions are associated with (because of encryption).
# I didn't know that handy trick with test$expected. I'll start there.
test2 <- chisq.test(encryptA_least_common$Frequency , p = Welsh_least_common$Welsh )
test2
test2$expected
# OK, we need to compress the first 7 categories. Here is a function for that.
chisq.compressed <- function(ValsVector, ProportionsVector, nToCompress) {
ValsVector <- vSumFirstNElementsLoop(ValsVector, nToCompress)
ProportionsVector <- vSumFirstNElementsLoop(ProportionsVector, nToCompress)
ReturnTest <- chisq.test(ValsVector, p = ProportionsVector)
return(ReturnTest)
}
test3 <- chisq.compressed(encryptA_least_common$Frequency , Welsh_least_common$Welsh , 7)
test3
# get the data and set up variables for Encrypted B
encryptB <- read_csv("encryptB.csv")
encryptB %>%
mutate(Key = reorder(Key, Frequency)) %>%
gf_col(Frequency ~ Key) %>%
gf_labs(title = "Letter frequencies in Encrypted B")
# looks more like English.
encryptB_least_common <- encryptB %>% arrange(Frequency)
head(encryptB_least_common)
length(encryptB_least_common$Key) # verifies 26 letters
# Run the test with English and EncryptedB.
test4 <- chisq.test(encryptB_least_common$Frequency , p = Eng_least_common$English )
test4
test4$expected
# combine the first 4  categories
test5 <- chisq.compressed(encryptB_least_common$Frequency , Eng_least_common$English , 4)
test5
# Run the test with Welsh and EncryptedB.
test6 <- chisq.test(encryptB_least_common$Frequency , p = Welsh_least_common$Welsh )
test6
test6$expected
# combine the first 6  categories
test7 <- chisq.compressed(encryptB_least_common$Frequency , Welsh_least_common$Welsh , 6)
test7
tabl <- "
| Text        |   English   |    Welsh    |\n
|-------------|-------------|-------------|\n
| EncryptedA  |    0.002945 |    0.5736   |\n
| EncryptedB  |    0.7146   |    2.2e-16  |\n
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
ls() # lists variables currently in memory
ls() # lists variables currently in memory
gc() # garbage collection: free up memory from deleted variables
somevals <- numeric(100)
somevals
library(readr)
library(dplyr)
library(ggformula)
library(microbenchmark)
setwd("~/GitHub/ds710notes/DS710_Wk11_notes")
for (i in 1:10000) {
# yada yada yada
if (i %% 100 == 0) {
print(i)
somevals[i %% 100 ] <- i # so we are only saving 100 vals at a time to memory
if (i %% 100 == 0) {
write_csv(data.frame(somevals), "somevals.csv", append = T) # the append is obviously key.
# or you could save 100 values at a time, like this:
filename <- paste("somevals", i-99, "_to_", i, ".csv", sep = "")
write_csv(data.frame(somevals), filename)
}
}
}
somevals <- numeric(100)
for (i in 1:10000) {
# yada yada yada
if (i %% 100 == 0) {
print(i)
}
somevals[i %% 100 ] <- i # so we are only saving 100 vals at a time to memory
if (i %% 100 == 0) {
write_csv(data.frame(somevals), "somevals.csv", append = T) # the append is obviously key.
# or you could save 100 values at a time, like this:
filename <- paste("somevals", i-99, "_to_", i, ".csv", sep = "")
write_csv(data.frame(somevals), filename)
}
}
# another good way to save files is as .RData, a compressed file format unique to R
# especially good if you want to save multiple variables
save(somevals, file = "somevals.RData")
somevals <- numeric(100)
for (i in 1:10000) {
# yada yada yada
if (i %% 100 == 0) {
print(i)
}
somevals[i %% 100 ] <- i # so we are only saving 100 vals at a time to memory
if (i %% 100 == 0) {
write_csv(data.frame(somevals), "somevals.csv", append = T) # the append is obviously key.
# or you could save 100 values at a time, like this:
filename <- paste("somevals", i-99, "_to_", i, ".csv", sep = "")
write_csv(data.frame(somevals), filename)
}
alarm()
}
install.packages("beepr")
library(beepr)
beep()
beep(2)
# I ne
beep(3)
beep(4)
beep(5)
beep(6)
beep(7)
beep(8)
beep(9)
beep(10)
beep(11)
beep(12)
beep(13)
beep(14)
beep(1)
beep(2)
?beep
